// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	"fmt"
	"strings"
	

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)







var openapi.YmlSubcommand bool

func openapi.YmlServers() []map[string]string {
	return []map[string]string{
		
			map[string]string{
				"description": "URL to the REST API",
				"url": "https://localhost:8000/api/v1/",
			},
		
	}
}


	// Openapi.Yml Changes a user's password.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/auth/change_password"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Logs a user in.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/auth/login"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Logs a user out.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/auth/logout"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Posts an order. Funds will be immediately debited.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/exchange/orders"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Modifies an existing order. Funds will immediately debited if the quantity increases, or credited if the quantity decreases.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/exchange/orders"

		req := cli.Client.Put().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Cancels a group of orders.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/exchange/orders/cancel"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Cancels an order by its ID.
	func Openapi.Yml(paramOrderId string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/exchange/orders/{order_id}"
				url = strings.Replace(url, "{order_id}", paramOrderId, 1)

		req := cli.Client.Delete().URL(url)

		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets an order by its ID.
	func Openapi.Yml(paramOrderId string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/exchange/orders/{order_id}"
				url = strings.Replace(url, "{order_id}", paramOrderId, 1)

		req := cli.Client.Get().URL(url)

		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Lists all markets.
	func Openapi.Yml(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets"

		req := cli.Client.Get().URL(url)

		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets all executed batches at a block (or latest)
	func Openapi.Yml(paramMarketId string, paramBlockNumber string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets/{market_id}/batches/{block_number}"
				url = strings.Replace(url, "{market_id}", paramMarketId, 1)
				url = strings.Replace(url, "{block_number}", paramBlockNumber, 1)

		req := cli.Client.Get().URL(url)

		
			
		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets all open order at latest block by market
	func Openapi.Yml(paramMarketId string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets/{market_id}/book"
				url = strings.Replace(url, "{market_id}", paramMarketId, 1)

		req := cli.Client.Get().URL(url)

		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets candlestick prices for the provided market.
	func Openapi.Yml(paramMarketId string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets/{market_id}/candles"
				url = strings.Replace(url, "{market_id}", paramMarketId, 1)

		req := cli.Client.Get().URL(url)

		
			
		
			paramStart := params.GetString("start")
			if paramStart != "" {
					req = req.AddQuery("start", fmt.Sprintf("%v", paramStart))
			}
			paramEnd := params.GetString("end")
			if paramEnd != "" {
					req = req.AddQuery("end", fmt.Sprintf("%v", paramEnd))
			}
			paramGranularity := params.GetString("granularity")
			if paramGranularity != "" {
					req = req.AddQuery("granularity", fmt.Sprintf("%v", paramGranularity))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Daily Price Stats
	func Openapi.Yml(paramMarketId string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets/{market_id}/daily"
				url = strings.Replace(url, "{market_id}", paramMarketId, 1)

		req := cli.Client.Get().URL(url)

		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets the batch auction state for the provided market ID and the block number.
	func Openapi.Yml(paramMarketId string, paramBlockNumber string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/markets/{market_id}/spread/{block_number}"
				url = strings.Replace(url, "{market_id}", paramMarketId, 1)
				url = strings.Replace(url, "{block_number}", paramBlockNumber, 1)

		req := cli.Client.Get().URL(url)

		
			
		
			
		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Returns the user's balance across all supported chains.
	func Openapi.Yml(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/balance"

		req := cli.Client.Get().URL(url)

		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Registers a MEV deposit on the DEX demo.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/deposits"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets all fills relevant to this user.
	func Openapi.Yml(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/fills"

		req := cli.Client.Get().URL(url)

		
			paramStartBlock := params.GetInt64("start-block")
			if paramStartBlock != 0 {
					req = req.AddQuery("start_block", fmt.Sprintf("%v", paramStartBlock))
			}
			paramEndBlock := params.GetInt64("end-block")
			if paramEndBlock != 0 {
					req = req.AddQuery("end_block", fmt.Sprintf("%v", paramEndBlock))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets all orders created by this user.
	func Openapi.Yml(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/orders"

		req := cli.Client.Get().URL(url)

		
			paramStart := params.GetInt64("start")
			if paramStart != 0 {
					req = req.AddQuery("start", fmt.Sprintf("%v", paramStart))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Transfers Funds
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/send"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Gets the user's list of withdrawals.
	func Openapi.Yml(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/withdrawals"

		req := cli.Client.Get().URL(url)

		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.Yml Initiates a withdrawal of a cleared asset.
	func Openapi.Yml(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := ""
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/user/withdrawals"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}




func openapi.YmlRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use: "openapi.yml",
			Short: "Manifold REST API",
			Long: cli.Markdown(""),
		}
		openapi.YmlSubcommand = true
	} else {
		cli.Root.Short = "Manifold REST API"
		cli.Root.Long = cli.Markdown("")
	}

	

	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Changes a user's password.",
				Long: cli.Markdown("All sessions using the previous password will be logged out.\n## Request Schema (application/json)\n\nproperties:\n  new_password:\n    type: string\n  old_password:\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Logs a user in.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  password:\n    type: string\n  username:\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Logs a user out.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Posts an order. Funds will be immediately debited.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  direction:\n    enum:\n    - BID\n    - ASK\n    type: string\n  market_id:\n    type: string\n  price:\n    type: string\n  quantity:\n    type: string\n  time_in_force:\n    type: integer\n  type:\n    enum:\n    - MARKET\n    - LIMIT\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Modifies an existing order. Funds will immediately debited if the quantity increases, or credited if the quantity decreases.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  direction:\n    enum:\n    - BID\n    - ASK\n    type: string\n  id:\n    type: string\n  market_id:\n    type: string\n  price:\n    type: string\n  quantity:\n    type: string\n  status:\n    enum:\n    - FILLED\n    - CANCELLED\n    - OPEN\n    type: string\n  time_in_force:\n    type: integer\n  type:\n    enum:\n    - MARKET\n    - LIMIT\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Cancels a group of orders.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  order_ids:\n    items:\n      type: string\n    type: array\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " order-id",
				Short: "Cancels an order by its ID.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " order-id",
				Short: "Gets an order by its ID.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Lists all markets.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " market-id block-number",
				Short: "Gets all executed batches at a block (or latest)",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(2),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], args[1], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " market-id",
				Short: "Gets all open order at latest block by market",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " market-id",
				Short: "Gets candlestick prices for the provided market.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().String("start", "", "ISO8601 date of when to start the candle query.")
			cmd.Flags().String("end", "", "ISO8601 date of when to end the candle query.")
			cmd.Flags().String("granularity", "", "Granularity of candle data to return.")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " market-id",
				Short: "Daily Price Stats",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: " market-id block-number",
				Short: "Gets the batch auction state for the provided market ID and the block number.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(2),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(args[0], args[1], params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Returns the user's balance across all supported chains.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Registers a MEV deposit on the DEX demo.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  asset_id:\n    description: The asset ID deposited.\n    type: string\n  quantity:\n    description: The amount of the asset deposited.\n    type: string\n  relay_chain_id:\n    enum:\n    - ETH\n    type: string\n  relay_chain_transaction_hash:\n    description: The transaction hash of the deposit on the MEV.\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Gets all fills relevant to this user.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().Int64("start-block", 0, "The block to start counting from.")
			cmd.Flags().Int64("end-block", 0, "The block to end counting at.")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Gets all orders created by this user.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().Int64("start", 0, "The ID to begin counting at.")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Transfers Funds",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  amount:\n    type: string\n  asset_id:\n    type: string\n  to:\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Gets the user's list of withdrawals.",
				Long: cli.Markdown(""),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.Yml(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "",
				Short: "Initiates a withdrawal of a cleared asset.",
				Long: cli.Markdown("\n## Request Schema (application/json)\n\nproperties:\n  asset_id:\n    description: The ID of the cleared asset to be withdrawn.\n    type: string\n  beneficiary:\n    description: The address of the recipient who will unlock funds on the MEV. Hex-encoded.\n    type: string\n  quantity:\n    description: The amount of the cleared asset to withdraw, as represented in the asset's base units.\n    type: string\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.Yml(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
}
